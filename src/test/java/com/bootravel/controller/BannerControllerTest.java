package com.bootravel.controller;

import static org.junit.jupiter.api.Assertions.*;


// Generated by CodiumAI

import com.bootravel.entity.BannerEntity;
import com.bootravel.payload.requests.CreateBannerRequests;
import com.bootravel.service.BannerService;
import lombok.var;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.MessagingException;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class BannerControllerTest {


    // createBanner endpoint with valid parameters returns 201 CREATED and banner entity

    @Test
    public void test_create_banner_with_valid_parameters() throws URISyntaxException, MessagingException, IOException, MessagingException, IOException, URISyntaxException {
        // Arrange
        BannerService bannerService = mock(BannerService.class);
        BannerController bannerController = new BannerController();
        bannerController.setBannerService(bannerService);

        CreateBannerRequests createBannerRequest = new CreateBannerRequests();
        createBannerRequest.setTypes("type");
        createBannerRequest.setHotelId(1);

        MultipartFile fileImage = mock(MultipartFile.class);

        BannerEntity bannerEntity = new BannerEntity();
        bannerEntity.setId(1L);
        bannerEntity.setImages("image.jpg");
        bannerEntity.setStatus(true);
        bannerEntity.setTypes("type");
        bannerEntity.setHotelId(1);
        bannerEntity.setCreatedBy(1);
        bannerEntity.setCreatedDate(Timestamp.from(Instant.now()));
        bannerEntity.setLastModifyDate(Timestamp.from(Instant.now()));

        when(bannerService.createBanner(createBannerRequest, fileImage)).thenReturn(bannerEntity);

        // Act
        ResponseEntity<BannerEntity> response = bannerController.createBanner("type", 1, fileImage);

        // Assert
        org.junit.Assert.assertEquals(HttpStatus.CREATED, response.getStatusCode());
        org.junit.Assert.assertEquals(bannerEntity, response.getBody());
    }

    // createBanner endpoint with missing hotelId returns 201 CREATED and banner entity with hotelId null
    @Test
    public void test_create_banner_with_invalid_hotelId() throws URISyntaxException, MessagingException, IOException {
        // Arrange
        BannerService bannerService = mock(BannerService.class);
        BannerController bannerController = new BannerController();
        bannerController.setBannerService(bannerService);

        CreateBannerRequests createBannerRequest = new CreateBannerRequests();
        createBannerRequest.setTypes("type");
        createBannerRequest.setHotelId(0);

        MultipartFile fileImage = mock(MultipartFile.class);

        BannerEntity createdBanner = new BannerEntity();
        createdBanner.setId(1L);
        createdBanner.setImages("image.jpg");
        createdBanner.setStatus(true);
        createdBanner.setTypes("type");
        createdBanner.setHotelId(null);
        createdBanner.setCreatedBy(1);
        createdBanner.setCreatedDate(Timestamp.from(Instant.now()));
        createdBanner.setLastModifyDate(Timestamp.from(Instant.now()));

        when(bannerService.createBanner(createBannerRequest, fileImage)).thenReturn(createdBanner);

        // Act
        ResponseEntity<BannerEntity> response = bannerController.createBanner("type", 0, fileImage);

        // Assert
        org.junit.Assert.assertEquals(HttpStatus.CREATED, response.getStatusCode());
        org.junit.Assert.assertEquals(createdBanner, response.getBody());
    }

    //createBanner with empty parameters returns 500 INTERNAL SERVER ERROR
    @Test
    public void test_create_banner_with_empty_parameters() throws URISyntaxException, MessagingException, IOException {
        // Arrange
        BannerService bannerService = mock(BannerService.class);
        BannerController bannerController = new BannerController();
        bannerController.setBannerService(bannerService);

        MultipartFile fileImage = mock(MultipartFile.class);

        // Act
        ResponseEntity<BannerEntity> response = bannerController.createBanner("", null, fileImage);

        var status = response.getStatusCode();
        // Assert
        org.junit.Assert.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, status);
    }

    @Test
    public void test_get_all_banner() {
        // Arrange
        BannerService bannerService = mock(BannerService.class);
        BannerController bannerController = new BannerController();
        bannerController.setBannerService(bannerService);

        List<BannerEntity> banners = new ArrayList<>();
        banners.add(new BannerEntity());
        banners.add(new BannerEntity());

        when(bannerService.listBanners()).thenReturn(banners);

        // Act
        ResponseEntity<List<BannerEntity>> response = bannerController.getAllBanner();

        // Assert
        org.junit.Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
        org.junit.Assert.assertEquals(banners, response.getBody());
    }
    //updateBannerStatus with valid parameters returns 200 OK
    @Test
    public void test_update_banner_status_with_valid_parameters() {
        // Arrange
        BannerService bannerService = mock(BannerService.class);
        BannerController bannerController = new BannerController();
        bannerController.setBannerService(bannerService);

        Long id = 1L;
        boolean status = true;

        BannerEntity updatedBanner = new BannerEntity();
        updatedBanner.setId(1L);
        updatedBanner.setImages("image.jpg");
        updatedBanner.setStatus(true);
        updatedBanner.setTypes("type");
        updatedBanner.setHotelId(1);
        updatedBanner.setCreatedBy(1);
        updatedBanner.setCreatedDate(Timestamp.from(Instant.now()));
        updatedBanner.setLastModifyDate(Timestamp.from(Instant.now()));

        when(bannerService.updateBannerStatus(id, status)).thenReturn(updatedBanner);

        // Act
        ResponseEntity<?> response = bannerController.updateBannerStatus(id, status);

        // Assert
        org.junit.Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
    }

}